{"version":3,"sources":["components/Navbar/index.js","components/Jumbotron/index.js","components/Wrapper/index.js","components/FriendCard/index.js","components/Footer/index.js","components/Homepage/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","message","score","topScore","Jumbotron","id","Wrapper","children","FriendCard","onClick","clickCard","src","image","alt","name","Footer","href","Homepage","state","friends","clickedId","shuffle","array","i","length","j","Math","floor","random","temp","event","console","log","target","_this","includes","setState","push","_this2","this","components_Navbar","components_Jumbotron","components_Wrapper","map","friend","components_FriendCard","key","components_Footer","Component","App","components_Homepage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6d5e9ac.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Navbar = (props) => {\n    return (\n        <nav className=\"navbar fixed-top navbar-dark bg-primary\">\n            <h5>Clicky-Game! By Beau Simpson</h5>\n            <h5>{props.message}</h5>\n            <h5>Score: {props.score} | Top Score: {props.topScore}</h5>\n        </nav>\n    )\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Jumbotron = () => {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div id=\"jumbotron-text\" className=\"container\">\n                <h1 className=\"display-4\">Clicky-Game!</h1>\n                <p className=\"lead\">Don't Click on an image more than once.</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper= (props) => {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst FriendCard = (props) => {\n  return (\n    <div className=\"card\" onClick={props.clickCard}>\n      <div className=\"img-container\" id={props.id}>\n        <img className=\"card-img-top\" src={props.image} alt={props.name} id={props.id}/>\n      </div>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Footer = () => {\n    return (\n        <nav className=\"navbar navbar-dark bg-primary\">\n            <a href=\"https://github.com/beausimpson/clicky-game\"> \n                <h5>GitHub Repo</h5>\n            </a>\n        </nav>\n    )\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport Navbar from \"../Navbar\";\nimport Jumbotron from \"../Jumbotron\";\nimport Wrapper from \"../Wrapper\";\nimport FriendCard from \"../FriendCard\";\nimport friends from \"../../friends.json\"\nimport Footer from \"../Footer\";\n\nclass Homepage extends Component {\n\n    state = {\n        message: \"Click an Image to begin!\",\n        score: 0,\n        topScore: 0,\n        friends,\n        clickedId: []\n    };\n\n    shuffle = (array) => {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    };\n\n    clickCard = (event) => {\n        console.log(event.target.id);\n\n        if (this.state.clickedId.includes(event.target.id)) {\n            this.setState({\n                score: 0,\n                message: \"WRONG!!! Start Over.\",\n                friends: this.shuffle(friends),\n                clickedId: []\n            })\n        }\n        else {\n            this.state.clickedId.push(event.target.id);\n            \n            this.setState({\n                score: this.state.score + 1,\n                message: \"Good Job!\",\n                friends: this.shuffle(friends)\n            });\n            \n            if (this.state.score === 11) {\n                this.setState({\n                    message: \"Great Job! You Win!\",\n                    score: 0,\n                    clickedId: [],\n                    friends: this.shuffle(friends),\n                    topScore: this.state.score + 1\n                })\n            }\n            else if (this.state.topScore <= this.state.score) {\n                this.setState({\n                    topScore: this.state.score + 1\n                })\n            }\n        }\n    };\n\n\n\n    render() {\n        return (\n            <div>\n                <Navbar\n                    message={this.state.message}\n                    score={this.state.score}\n                    topScore={this.state.topScore}\n                />\n                <Jumbotron />\n                <Wrapper>\n                    {friends.map((friend) => (\n                        <FriendCard\n                            id={friend.id}\n                            key={friend.id}\n                            image={friend.image}\n                            clickCard={this.clickCard}\n                        />\n                    ))}\n                </Wrapper>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default Homepage;\n\n","import React, { Component } from 'react';\nimport Homepage from './components/Homepage';\n// import logo from './logo.svg';\n// import './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Homepage />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}